ARG ARCH

#------------------------------------------------------------------------------------
#--------------------------build-----------------------------------------------------
#------------------------------------------------------------------------------------
# http://releases.ubuntu.com/focal/
FROM ${ARCH}ossrs/srs:ubuntu20-base2 as build

ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG JOBS=2
RUN echo "BUILDPLATFORM: $BUILDPLATFORM, TARGETPLATFORM: $TARGETPLATFORM, JOBS: $JOBS"

# https://serverfault.com/questions/949991/how-to-install-tzdata-on-a-ubuntu-docker-image
ENV DEBIAN_FRONTEND=noninteractive

# Update the mirror from aliyun, @see https://segmentfault.com/a/1190000022619136
#ADD sources.list /etc/apt/sources.list
#RUN apt-get update

RUN apt-get update && \
    apt-get install -y aptitude gcc g++ make patch unzip python \
        autoconf automake libtool pkg-config zlib1g-dev \
        liblzma-dev libzip-dev libbz2-dev tcl \
        gperf python3

# Libs path for app which depends on ssl, such as libsrt.
ENV PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/ssl/lib/pkgconfig

# Libs path for FFmpeg(depends on serval libs), or it fail with:
#       ERROR: speex not found using pkg-config
ENV PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/lib/pkgconfig:/usr/local/lib64/pkgconfig

# To use if in RUN, see https://github.com/moby/moby/issues/7281#issuecomment-389440503
# Note that only exists issue like "/bin/sh: 1: [[: not found" for Ubuntu20, no such problem in CentOS7.
SHELL ["/bin/bash", "-c"]

# To limit each jobs in 6h, see https://docs.github.com/en/actions/learn-github-actions/usage-limits-billing-and-administration#usage-limits
RUN which cmake && cmake --version

# Cost: 502.5s
# The libsrt for SRS, which depends on openssl and cmake.
ADD srt-1.4.1.tar.gz /tmp
RUN cd /tmp/srt-1.4.1 && \
  ./configure --enable-shared=0 --enable-static --disable-app --enable-c++11=0 && \
  make -j${JOBS} && make install

# Cost: 904.1s
# For libxml2, depends on cmake.
RUN apt install -y python-dev
ADD libxml2-2.9.12.tar.gz /tmp
RUN cd /tmp/libxml2-2.9.12 && ./autogen.sh && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

# Cost: 371.5s
# For libx265, depends on cmake. Note that we force to generate the x265.pc by replace X265_LATEST_TAG.
#     if(X265_LATEST_TAG)
#         configure_file("x265.pc.in" "x265.pc" @ONLY)
ADD x265-3.5_RC2.tar.bz2 /tmp
# Disable libx265 for ARMv7, because it failed for https://github.com/google/XNNPACK/issues/1465
#     blockcopy8.S:679: Error: selected processor does not support `usad8 r0,r0,r1' in ARM mode
RUN if [[ $TARGETPLATFORM != 'linux/arm/v7' ]]; then \
        cd /tmp/x265-3.5_RC2/build/linux && \
        sed -i 's/^if(X265_LATEST_TAG)/if(TRUE)/g' ../../source/CMakeLists.txt && \
        cmake -DENABLE_SHARED=OFF ../../source && make -j${JOBS} && make install; \
    fi

# Cost: 204s
ADD libpng-1.6.40.tar.gz /tmp
RUN cd /tmp/libpng-1.6.40 && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

# Cost: 128s
ADD fribidi-1.0.13.tar.bz2 /tmp
RUN cd /tmp/fribidi-1.0.13 && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

# Cost: 2167s
ADD harfbuzz-8.3.0.tar.bz2 /tmp
RUN cd /tmp/harfbuzz-8.3.0 && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

# Cost: 259s
# Depends on libpng.
ADD freetype-2.13.2.tar.gz /tmp
RUN cd /tmp/freetype-2.13.2 && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

# Cost: 174s
ADD expat-2.5.0.tar.bz2 /tmp
RUN cd /tmp/expat-2.5.0 && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

# Cost: 399s
# Depends on gperf, expat, freetype.
ADD fontconfig-2.14.2.tar.bz2 /tmp
RUN cd /tmp/fontconfig-2.14.2 && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

# Cost: 130.9s
# For libass, which depends on libfreetype6-dev, libfribidi-dev, libharfbuzz-dev, libfontconfig1-dev.
ADD libass-0.17.1.tar.gz /tmp
RUN cd /tmp/libass-0.17.1 && ./configure --disable-shared --enable-static && make -j${JOBS} && make install

